{"title":"Deploy Node.js项目","content":"因为以前的公司一开始使用的是php，每次deploy只需要把目录备份，再将代码更新到最新就可以了。后来改用了node，每次deploy项目的时候，还是沿用了php的方法，但由于node单进程的，因此需要重启node代码才有效。以前的方式都是直接kill了进程再重启，想想就觉得汗颜。这样做的不好之处有：\n\n* 需要每次登录进去服务器，手动打命令查找线程pid，再去kill\n* 如果当前有用户正在连接到node，会直接中断用户的请求\n* 在重启的过程中，用户无法连接到node\n  \n那么在这里，我期望的deploy又是怎样的呢，最少有以下几点：\n\n* 不需要太多的手动操作，如查看进程、kill进程、重启之类这些都应该是自动的\n* 重启不应该把当前连接中的请求中断\n* 重启过程应该是无缝切换，而不是会有一段时间无法访问（当然node的重启时间很短）\n  \n代码如下：\n\n    var cluster = require('cluster');\n    var clusterHandler = function(workerTotal){\n      // 多长时间如果worker没退出直接kill\n      var maxDelay = 300 * 1000;\n\n      // 消息处理\n      var messageHandler = function(msg){\n        // 如果收到重启命令，让worker调用disconnect\n        if(msg && msg.cmd === 'restart'){\n          Object.keys(cluster.workers).forEach(function(id) {\n            cluster.workers[id].disconnect();\n            // 强制退出\n            setTimeout(function(){\n              if(cluster.workers[id]){\n                cluster.workers[id].kill();\n              }\n            }, maxDelay);\n          });\n        }\n      };\n\n      for (var i = 0; i < workerTotal; i++) {\n        cluster.fork();\n      }\n\n      // worker online时添加message处理\n      cluster.on('online', function(worker){\n        console.dir('worker ' + worker.process.pid + ' online');\n        worker.on('message', messageHandler);\n      });\n\n      // 当worker退出时，再fork一个新的worker\n      cluster.on('exit', function(worker, code, signal) {\n        console.dir('worker ' + worker.process.pid + ' exit');\n        cluster.fork();\n      });\n    };\n\n    var workerHandler = function(){\n      var http = require('http');\n      http.createServer(function(req, res) {\n        /* 当请求url为/restart时，告诉master去重启所有worker（这里只是演示，\n\t\t所以判断比较简单，直接环境中应该只有授权用户才有该权限）*/\n        if(req.url === '/restart'){\n          process.send({cmd : 'restart'});\n        }\n        res.writeHead(200);\n        res.end(\"hello world\\n\");\n      }).listen(8000);\n    };\n\n\n    if (cluster.isMaster) {\n      clusterHandler(require('os').cpus().length);\n    } else {\n      workerHandler();\n    }\n\n上述代码可以通过一个http请求实现各个worker的重启，如果需要重启master，那就只能kill了master再启动了（由于master只是简单的处理，一般不会怎么变化，因此需要重启master的时候很少）。在测试的时候发现，如果某worker有接收过http请求，那么调用它的disconnect，它不会马上exit（需要已处理完所有的请求），在windows下面测试大概会在120s之后退出。请注意，上述代码无更新代码的操作。","tags":["Node","javascript"]}