// Generated by CoffeeScript 1.6.2
(function() {
  var $, _ref, _ref1, _ref2, _ref3;

  if ((_ref = window.JT) == null) {
    window.JT = {};
  }

  if ((_ref1 = JT.Model) == null) {
    JT.Model = {};
  }

  if ((_ref2 = JT.View) == null) {
    JT.View = {};
  }

  if ((_ref3 = JT.Collection) == null) {
    JT.Collection = {};
  }

  $ = window.jQuery;

  JT.VERSION = '0.0.1';

  JT.Model.Select = Backbone.Model.extend({});

  JT.Collection.Select = Backbone.Collection.extend({
    model: JT.Model.Select
  });

  JT.View.Select = Backbone.View.extend({
    template: _.template('<div class="jtSelect jtBorderRadius3">' + '<a href="javascript:;" class="showSelect jtGrayGradient"><span class="jtArrowDown"></span></a>' + '<input class="userInput" type="text" title="<%= tips %>" placeholder="<%= tips %>" />' + '<ul class="selectList"><%= list %></ul>' + '</div>'),
    events: {
      'click .showSelect': 'toggleSelect',
      'keyup .userInput': 'userInput',
      'dblclick .userInput': 'dblclickUserInput',
      'click .option': 'select'
    },
    userInput: function(e) {
      if (e.keyCode === 0x0d) {
        this.show(this.$el.find('.selectList'));
      } else if (e.keyCode === 0x1b) {
        this.hide(this.$el.find('.selectList'));
      }
      return this;
    },
    toggleSelect: function() {
      var $el, selectList;

      $el = this.$el;
      selectList = $el.find('.selectList');
      if (selectList.is(":hidden")) {
        $el.find('.userInput').val('');
        this.show(selectList);
      } else {
        this.hide(selectList);
      }
      return this;
    },
    dblclickUserInput: function() {
      var $el;

      $el = this.$el;
      $el.find('.userInput').val('');
      return this.show($el.find('.selectList'));
    },
    val: function(value) {
      var $el, returnValue, userInput;

      $el = this.$el;
      userInput = $el.find('.userInput');
      returnValue = '';
      if (!value) {
        value = userInput.val();
        $el.find('.option').each(function() {
          var obj;

          obj = $(this);
          if (!returnValue && obj.text() === value) {
            return returnValue = obj.attr('data-key');
          }
        });
        return returnValue;
      } else {
        $el.find('.option').each(function() {
          var obj;

          obj = $(this);
          if (!returnValue && obj.attr('data-key') === value) {
            return returnValue = obj.text();
          }
        });
        userInput.val(returnValue);
        return this;
      }
    },
    show: function(selectList) {
      if (selectList == null) {
        selectList = this.$el.find('.selectList');
      }
      this.filter();
      this.$el.find('.showSelect span').removeClass('jtArrowDown').addClass('jtArrowUp');
      selectList.show();
      return this;
    },
    hide: function(selectList) {
      this.reset();
      this.$el.find('.showSelect span').removeClass('jtArrowUp').addClass('jtArrowDown');
      selectList.hide();
      return this;
    },
    filter: function() {
      var $el, key, options;

      $el = this.$el;
      key = $el.find('.userInput').val().trim();
      options = $el.find('.selectList .option');
      if (key) {
        options.each(function(i, option) {
          var value;

          option = $(option);
          value = option.text();
          if (!~value.indexOf(key)) {
            return option.hide();
          }
        });
      } else {
        options.show();
      }
      return this;
    },
    reset: function() {
      this.$el.find('.selectList .option').show();
      return this;
    },
    select: function(e) {
      var obj;

      obj = $(e.currentTarget);
      this.$el.find('.userInput').val(obj.text());
      this.toggleSelect();
      return this;
    },
    destroy: function() {
      this.remove();
      return this.$el.remove();
    },
    initialize: function() {
      var self;

      self = this;
      this.$el.addClass('jtWidget');
      this.listenTo(this.model, "all", function(event) {
        if (!~event.indexOf(':')) {
          return self.render();
        }
      });
      this.render();
      return this;
    },
    render: function() {
      var html, listHtmlArr;

      listHtmlArr = _.map(this.model.toJSON(), function(item) {
        var key, name;

        if (_.isObject(item)) {
          name = item.name;
          key = item.key;
        } else {
          name = item;
          key = item;
        }
        return "<li class='option' data-key='" + key + "'>" + name + "</li>";
      });
      this.templateData = {
        tips: this.options.tips,
        list: listHtmlArr.join('')
      };
      html = this.template(this.templateData);
      this.$el.html(html);
      return this;
    }
  });

  JT.Model.Dialog = Backbone.Model.extend({
    defaults: {
      title: '未命名标题',
      content: '未定义内容',
      destroyOnClose: true
    }
  });

  JT.View.Dialog = Backbone.View.extend({
    template: _.template('<h3 class="title jtBlueGradient jtBorderRadius3"><a href="javascript:;" class="close">×</a><%= title %></h3>' + '<div class="content"><%= content %></div>' + '<%= btns %>'),
    events: {
      'click .btns .btn': 'btnClick',
      'click .close': 'close'
    },
    btnClick: function(e) {
      var btnCbfs, cbf, cbfResult, key, obj;

      btnCbfs = this.btnCbfs;
      obj = $(e.currentTarget);
      key = obj.text();
      cbf = btnCbfs != null ? btnCbfs[key] : void 0;
      cbfResult = null;
      if (_.isFunction(cbf)) {
        cbfResult = cbf(this.$el);
      }
      if (cbfResult !== false) {
        this.close();
      }
      return this;
    },
    open: function() {
      this.$el.show();
      return this;
    },
    close: function() {
      if (this.modalMask) {
        this.modalMask.hide();
      }
      if (this.model.destroyOnClose) {
        this.destroy();
      } else {
        this.$el.hide();
      }
      return this;
    },
    destroy: function() {
      if (this.model.modal) {
        this.modalMask.remove();
      }
      return this.remove();
    },
    getBtnsHtml: function(btns) {
      var btnHtmlArr;

      if (!btns) {
        return '';
      } else {
        btnHtmlArr = [];
        _.each(btns, function(value, key) {
          return btnHtmlArr.push("<a class='btn' href='javascript:;'>" + key + "</a>");
        });
        return "<div class='btns'>" + (btnHtmlArr.join('')) + "</div>";
      }
    },
    initialize: function() {
      var self;

      self = this;
      this.$el.addClass('jtWidget jtDialog jtBorderRadius3');
      this.listenTo(this.model, "all", function(event) {
        if (!~event.indexOf(':')) {
          return self.render();
        }
      });
      this.render();
      return this;
    },
    render: function() {
      var html;

      this.templateData = this.model.toJSON();
      this.btnCbfs = this.templateData.btns;
      this.templateData.btns = this.getBtnsHtml(this.templateData.btns);
      if (this.model.modal) {
        this.modalMask = $('<div class="jtMask" />').appendTo('body');
      }
      html = this.template(this.templateData);
      return this.$el.html(html);
    }
  });

  JT.View.Alert = Backbone.View.extend({
    initialize: function() {
      var el;

      el = $('<div class="jtAlertDlg" />').appendTo('body').get(0);
      return new JT.View.Dialog({
        el: el,
        model: this.model
      });
    }
  });

  JT.DatePicker = Backbone.View.extend({
    events: {
      'click .daysContainer .prev': 'prevMonth',
      'click .daysContainer .next': 'nextMonth',
      'click .daysContainer .dateView': 'showMonths',
      'click .daysContainer .day': 'selectDay',
      'click .monthsContainer .prev': 'prevYear',
      'click .monthsContainer .next': 'nextYear',
      'click .monthsContainer .month': 'selectMonth'
    },
    datePickerHtml: '<div class="jtDatePicker jtBorderRadius3">' + '<div class="arrowContainer arrowContainerBottom"></div>' + '<div class="arrowContainer"></div>' + '<div class="daysContainer">' + '<table>' + '<thead></thead>' + '<tbody></tbody>' + '</table>' + '</div>' + '<div class="monthsContainer">' + '<table>' + '<thead></thead>' + '<tbody></tbody>' + '</table>' + '</div>' + '<div class="yearsContainer">' + '<table>' + '<thead></thead>' + '<tbody></tbody>' + '</table>' + '</div>' + '</div>',
    monthsTheadTemplate: _.template('<tr>' + '<th class="prev">‹</th>' + '<th colspan="5" class="dateView"><%= year %></th>' + '<th class="next">›</th>' + '</tr>'),
    daysTheadTemplate: _.template('<tr>' + '<th class="prev">‹</th>' + '<th colspan="5" class="dateView"><%= date %></th>' + '<th class="next">›</th>' + '</tr>' + '<tr>' + '<th>Su</th><th>Mo</th><th>Tu</th><th>We</th><th>Th</th><th>Fr</th><th>Sa</th>' + '</tr>'),
    initialize: function() {
      var $el, datePicker, elOffset, options, self, _ref4;

      self = this;
      $el = this.$el;
      options = this.options;
      if ((_ref4 = options.months) == null) {
        options.months = ['一月', '二月', '三月', '四月', '五月', '六月', '七月', '八月', '九月', '十月', '十一月', '十二月'];
      }
      this.date = new Date(options.date || new Date());
      elOffset = $el.offset();
      datePicker = $(this.datePickerHtml);
      datePicker.css({
        left: elOffset.left,
        top: elOffset.top + $el.outerHeight(true) + 10
      });
      datePicker.appendTo('body');
      this.$inputObj = $el;
      this.setElement(datePicker.addClass('jtWidget'));
      this.render();
      this.$inputObj.on('click.jtDatePicker', function() {
        if (datePicker.is(':hidden')) {
          return self.show();
        } else {
          return self.hide();
        }
      });
      return this;
    },
    prevMonth: function() {
      var date, month;

      date = this.date;
      month = date.getMonth();
      if (month > 0) {
        date.setMonth(month - 1);
      } else {
        date.setYear(date.getFullYear() - 1);
        date.setMonth(11);
      }
      return this.render();
    },
    nextMonth: function() {
      var date, month;

      date = this.date;
      month = date.getMonth();
      if (month < 11) {
        date.setMonth(month + 1);
      } else {
        date.setYear(date.getFullYear() + 1);
        date.setMonth(0);
      }
      return this.render();
    },
    prevYear: function() {
      var date;

      date = this.date;
      this.date.setFullYear(date.getFullYear() - 1);
      return this.render('month');
    },
    nextYear: function() {
      var date;

      date = this.date;
      this.date.setFullYear(date.getFullYear() + 1);
      return this.render('month');
    },
    showMonths: function() {
      return this.render('month');
    },
    selectDay: function(e) {
      var obj;

      obj = $(e.currentTarget);
      this.date.setDate(obj.text());
      this.val().hide();
      return this;
    },
    val: function() {
      var date, day, month, year;

      date = this.date;
      month = date.getMonth() + 1;
      year = date.getFullYear();
      day = date.getDate();
      if (month < 10) {
        month = '0' + month;
      }
      if (day < 10) {
        day = '0' + day;
      }
      this.$inputObj.val("" + year + "-" + month + "-" + day);
      return this;
    },
    selectMonth: function(e) {
      var obj;

      obj = $(e.currentTarget);
      this.date.setMonth(obj.index('.month'));
      this.val().render('day');
      return this;
    },
    show: function() {
      this.render();
      this.$el.show();
      return this;
    },
    hide: function() {
      this.$el.hide();
      return this;
    },
    getMonthsTbody: function() {
      var months, tbodyHtml;

      tbodyHtml = [];
      months = this.options.months;
      tbodyHtml.push('<tr><td colspan="7">');
      _.each(months, function(month, i) {
        return tbodyHtml.push("<span class='month'>" + month + "</span>");
      });
      tbodyHtml.push('</td></tr>');
      return tbodyHtml.join('');
    },
    getDaysTbody: function() {
      var currentDate, currentDay, currentDayMatchFlag, date, dateTotal, day, dayTotalList, i, index, month, selectDay, selectDayMatchFlag, tbodyHtml, year, _i;

      dayTotalList = [31, 28, 31, 30, 31, 30, 31, 31, 30, 31, 30, 31];
      date = new Date(this.date.getTime());
      date.setDate(1);
      index = date.getDay();
      month = date.getMonth();
      year = date.getFullYear();
      if ((year % 4 === 0 && year % 100 !== 0) || (year % 400 === 0)) {
        dayTotalList[1] = 29;
      }
      dateTotal = dayTotalList[month] + index;
      currentDate = new Date();
      currentDayMatchFlag = false;
      if (currentDate.getMonth() === month && currentDate.getFullYear() === year) {
        currentDayMatchFlag = true;
        currentDay = currentDate.getDate();
      }
      selectDayMatchFlag = false;
      if (this.date.getMonth() === month && this.date.getFullYear() === year) {
        selectDayMatchFlag = true;
        selectDay = this.date.getDate();
      }
      tbodyHtml = [];
      for (i = _i = 0; 0 <= dateTotal ? _i < dateTotal : _i > dateTotal; i = 0 <= dateTotal ? ++_i : --_i) {
        if (i === 0) {
          tbodyHtml.push('<tr>');
        } else if (i % 7 === 0) {
          tbodyHtml.push('</tr><tr>');
        } else if (i === dateTotal) {
          tbodyHtml.push('</tr>');
        }
        if (i < index) {
          tbodyHtml.push("<td></td>");
        } else {
          day = i - index + 1;
          if (selectDayMatchFlag && day === selectDay) {
            tbodyHtml.push("<td class='active jtBorderRadius3 day'>" + day + "</td>");
          } else if (currentDayMatchFlag && day === currentDay) {
            tbodyHtml.push("<td class='currentDay jtBorderRadius3 day'>" + day + "</td>");
          } else {
            tbodyHtml.push("<td class='day'>" + day + "</td>");
          }
        }
      }
      return tbodyHtml.join('');
    },
    getViewDate: function() {
      var months;

      months = this.options.months;
      return "" + months[this.date.getMonth()] + " " + (this.date.getFullYear());
    },
    render: function(type) {
      var datePicker, daysContainer, monthsContainer;

      if (type == null) {
        type = 'day';
      }
      datePicker = this.$el;
      daysContainer = datePicker.find('.daysContainer');
      monthsContainer = datePicker.find('.monthsContainer');
      if (type === 'day') {
        daysContainer.show();
        monthsContainer.hide();
        daysContainer.find('thead').html(this.daysTheadTemplate({
          date: this.getViewDate()
        }));
        daysContainer.find('tbody').html(this.getDaysTbody());
      } else if (type === 'month') {
        daysContainer.hide();
        monthsContainer.show();
        monthsContainer.find('thead').html(this.monthsTheadTemplate({
          year: this.date.getFullYear()
        }));
        monthsContainer.find('tbody').html(this.getMonthsTbody());
      }
      return this;
    },
    destroy: function() {
      this.$inputObj.off('.jtDatePicker');
      return this.remove();
    }
  });

  JT.Model.Accordion = Backbone.Model.extend({});

  JT.Collection.Accordion = Backbone.Collection.extend({
    model: JT.Model.Accordion
  });

  JT.View.Accordion = Backbone.View.extend({
    events: {
      'click .item .title': 'active'
    },
    itemTemplate: _.template('<div class="item">' + '<h3 class="title"><div class="jtArrowDown"></div><div class="jtArrowRight"></div><%= title %></h3>' + '<div class="content"><%= content %></div>' + '</div>'),
    initialize: function() {
      var self;

      self = this;
      this.$el.addClass('jtWidget jtAccordion jtBorderRadius3');
      this.listenTo(this.model, "all", function(event) {
        var index;

        if (!~event.indexOf(':')) {
          index = self.activeIndex;
          self.activeIndex = -1;
          return self.render(index);
        }
      });
      this.render();
      return this;
    },
    active: function(index) {
      var $el;

      $el = this.$el;
      if (!_.isNumber(index)) {
        index = $(index.currentTarget).closest('.item').index();
      }
      if (this.activeIndex !== index) {
        $el.find('.item').each(function(i) {
          var obj;

          obj = $(this);
          if (i === index) {
            return obj.addClass('active').find('.title').addClass('jtBlueGradient').removeClass('jtGrayGradient');
          } else {
            return obj.removeClass('active').find('.title').addClass('jtGrayGradient').removeClass('jtBlueGradient');
          }
        });
        this.activeIndex = index;
      }
      return this;
    },
    render: function(activeIndex) {
      var htmlArr, self;

      if (activeIndex == null) {
        activeIndex = 0;
      }
      self = this;
      htmlArr = _.map(this.model.toJSON(), function(item) {
        return self.itemTemplate(item);
      });
      this.$el.html(htmlArr.join(''));
      this.active(activeIndex);
      return this;
    }
  });

  JT.Model.Tabs = Backbone.Model.extend({});

  JT.Collection.Tabs = Backbone.Collection.extend({
    model: JT.Model.Tabs
  });

  JT.View.Tabs = Backbone.View.extend({
    events: {
      'click .nav li': 'active'
    },
    initialize: function() {
      var self;

      self = this;
      this.$el.addClass('jtWidget jtTabs jtBorderRadius3');
      this.render();
      this.listenTo(this.model, "all", function(event) {
        var index;

        if (!~event.indexOf(':')) {
          index = self.activeIndex;
          self.activeIndex = -1;
          return self.render(index);
        }
      });
      return this;
    },
    active: function(index) {
      var $el, liList, tabList;

      $el = this.$el;
      if (!_.isNumber(index)) {
        index = $(index.currentTarget).index();
      }
      if (this.activeIndex !== index) {
        liList = $el.find('.nav li');
        tabList = $el.find('.tab');
        if (this.activeIndex != null) {
          liList.eq(this.activeIndex).removeClass('active');
          tabList.eq(this.activeIndex).removeClass('active');
        }
        liList.eq(index).addClass('active');
        tabList.eq(index).addClass('active');
        this.activeIndex = index;
      }
      return this;
    },
    render: function(activeIndex) {
      var contentArr, data, liHtmlArr, self, tabHtmlArr, titleArr;

      if (activeIndex == null) {
        activeIndex = 0;
      }
      self = this;
      data = this.model.toJSON();
      titleArr = _.pluck(data, 'title');
      contentArr = _.pluck(data, 'content');
      liHtmlArr = _.map(titleArr, function(title) {
        return "<li>" + title + "</li>";
      });
      tabHtmlArr = _.map(contentArr, function(content) {
        return "<div class='tab'>" + content + "</div>";
      });
      this.$el.html("<ul class='jtBlueGradient nav'>" + (liHtmlArr.join('')) + "</ul>" + (tabHtmlArr.join('')));
      this.active(activeIndex);
      return this;
    }
  });

}).call(this);
